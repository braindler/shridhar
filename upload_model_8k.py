#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ shridhar_8k –Ω–∞ Hugging Face Hub
"""

import os
import json
from huggingface_hub import HfApi, create_repo
from transformers import AutoTokenizer, AutoModelForCausalLM
from peft import PeftModel

def upload_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ Hugging Face Hub"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
    api = HfApi()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    repo_id = "nativemind/shridhar_8k"
    model_path = "./braindler_finetuned_8k"
    lora_path = "./braindler_finetuned_8k_lora"
    
    print(f"–°–æ–∑–¥–∞—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_id}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        create_repo(
            repo_id=repo_id,
            repo_type="model",
            private=False,  # –ü—É–±–ª–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å
            exist_ok=True
        )
        print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}")
        return
    
    print("üì§ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –∏ LoRA –∞–¥–∞–ø—Ç–µ—Ä—ã
        base_model_name = "nativemind/braindler_full_trained_model"
        
        print("–ó–∞–≥—Ä—É–∂–∞—é –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å...")
        tokenizer = AutoTokenizer.from_pretrained(base_model_name)
        base_model = AutoModelForCausalLM.from_pretrained(
            base_model_name,
            torch_dtype="auto",
            device_map="cpu"  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ CPU –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        )
        
        print("–ó–∞–≥—Ä—É–∂–∞—é LoRA –∞–¥–∞–ø—Ç–µ—Ä—ã...")
        model = PeftModel.from_pretrained(base_model, lora_path)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º LoRA —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
        print("–û–±—ä–µ–¥–∏–Ω—è—é LoRA —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é...")
        merged_model = model.merge_and_unload()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Hub
        print("–ó–∞–≥—Ä—É–∂–∞—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ Hub...")
        merged_model.push_to_hub(
            repo_id=repo_id,
            private=False
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
        print("–ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä...")
        tokenizer.push_to_hub(
            repo_id=repo_id,
            private=False
        )
        
        # –°–æ–∑–¥–∞–µ–º README.md –¥–ª—è –º–æ–¥–µ–ª–∏
        create_model_card(repo_id)
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤: https://huggingface.co/{repo_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")

def create_model_card(repo_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ README.md –¥–ª—è –º–æ–¥–µ–ª–∏"""
    
    card_content = f"""---
license: mit
language:
- ru
tags:
- spirituality
- vaishnavism
- krishna
- hinduism
- religious-texts
- russian
- lora
- finetuned
base_model: nativemind/braindler_full_trained_model
pipeline_tag: text-generation
---

# Shridhar 8K - –§–∏–ª–æ—Å–æ—Ñ–∏—è –≤–∞–π—à–Ω–∞–≤–∏–∑–º–∞

## –û–ø–∏—Å–∞–Ω–∏–µ

–≠—Ç–æ —Ñ–∞–π–Ω—Ç—é–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏ `braindler_full_trained_model` —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–æ 8K —Ç–æ–∫–µ–Ω–æ–≤, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –¥—É—Ö–æ–≤–Ω—ã—Ö —Ç–µ–∫—Å—Ç–∞—Ö –®—Ä–∏–ª—ã –®—Ä–∏–¥—Ö–∞—Ä–∞ –ú–∞—Ö–∞—Ä–∞–¥–∂–∞.

## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

- **–ö–æ–Ω—Ç–µ–∫—Å—Ç**: 8192 —Ç–æ–∫–µ–Ω–æ–≤ (8K)
- **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**: GPT-2 —Å LoRA –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏
- **–Ø–∑—ã–∫**: —Ä—É—Å—Å–∫–∏–π
- **–¢–µ–º–∞—Ç–∏–∫–∞**: —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –≤–∞–π—à–Ω–∞–≤–∏–∑–º–∞, –∫—Ä–∏—à–Ω–∞–∏–∑–º, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å
- **–û–±—É—á–µ–Ω–∏–µ**: LoRA —Ñ–∞–π–Ω—Ç—é–Ω–∏–Ω–≥ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ `shridhar_maharaj_books`

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

```python
from transformers import AutoTokenizer, AutoModelForCausalLM

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model_name = "{repo_id}"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
prompt = "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –≤–∞–π—à–Ω–∞–≤–∏–∑–º–∞:"
inputs = tokenizer(prompt, return_tensors="pt")

with torch.no_grad():
    outputs = model.generate(
        **inputs,
        max_new_tokens=300,
        temperature=0.7,
        do_sample=True,
        pad_token_id=tokenizer.eos_token_id
    )

response = tokenizer.decode(outputs[0], skip_special_tokens=True)
print(response)
```

## –î–∞—Ç–∞—Å–µ—Ç –æ–±—É—á–µ–Ω–∏—è

–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ `nativemind/shridhar_maharaj_books`, —Å–æ–¥–µ—Ä–∂–∞—â–µ–º:
- 15 –∫–Ω–∏–≥ –®—Ä–∏–ª—ã –®—Ä–∏–¥—Ö–∞—Ä–∞ –ú–∞—Ö–∞—Ä–∞–¥–∂–∞
- 2.2MB —Ç–µ–∫—Å—Ç–∞
- 313K —Å–ª–æ–≤
- –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –∏ –¥—É—Ö–æ–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏

- **Base Model**: nativemind/braindler_full_trained_model
- **LoRA Rank**: 4
- **LoRA Alpha**: 8
- **Target Modules**: c_attn, c_proj
- **Learning Rate**: 1e-5
- **Epochs**: 1
- **Gradient Checkpointing**: Enabled

## –ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞

–í—Å–µ —Ç–µ–∫—Å—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –®—Ä–∏ –ß–∞–π—Ç–∞–Ω—å—è –°–∞—Ä–∞—Å–≤–∞—Ç –ú–∞—Ç—Ö—É –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏—Ö –ª–∏—Ü–µ–Ω–∑–∏–µ–π.

## –ö–æ–Ω—Ç–∞–∫—Ç

–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –º–æ–¥–µ–ª–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º README.md –ª–æ–∫–∞–ª—å–Ω–æ
    with open("./model_readme.md", 'w', encoding='utf-8') as f:
        f.write(card_content)
    
    print("‚úÖ README.md —Å–æ–∑–¥–∞–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ shridhar_8k –Ω–∞ Hugging Face Hub")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    try:
        api = HfApi()
        user = api.whoami()
        print(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {user['name']}")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("huggingface-cli login")
        return
    
    upload_model()

if __name__ == "__main__":
    main()
